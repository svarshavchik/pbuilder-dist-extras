#! /usr/bin/perl

use strict;
use warnings;
use IO::File;

my $release = shift @ARGV;
my $cmd = shift @ARGV;

my $hooksdir = "/var/cache/pbuilder/hook.d";

unless ($release && $cmd)
{
    print STDERR "Usage: $0 [distribution] {command]\n";
    exit 1;
}

my $userhome = $ENV{HOME};

if (($cmd eq "-switch") || ($cmd eq "-init"))
{
    $userhome = shift @ARGV
	or die "Invalid invocation.\n";
}
my $result = $userhome . "/pbuilder/${release}_result";

if ($cmd eq 'unhook' || $cmd eq "-unhook")
{
    my $rc = IO::File->new($ENV{HOME} . "/.pbuilderrc", "r");

    my $settings = "";
    my $orig = "";

    if ($rc)
    {
	my $line;

	my $setting_hookdir = "HOOKDIR=\"$hooksdir\"";
	my $setting_bindmounts = "BINDMOUNTS=\"$result\"";

	while (defined($line = <$rc>))
	{
	    $orig .= $line;

	    if ($line =~ /^HOOKDIR=/)
	    {
		chomp $line;

		unless ($line eq $setting_hookdir)
		{
		    print STDERR "Existing setting: $line\n";
		    print STDERR "Cannot update.\n";
		    exit 1;
		}
		next;
	    }

	    if ($line =~ /^BINDMOUNTS=/)
	    {
		chomp $line;

		unless ($line eq $setting_bindmounts)
		{
		    print STDERR "Replacing $line\n";
		}
		next;
	    }
	    $settings .= $line;
	}
    }

    if ($orig ne $settings)
    {
	$rc = IO::File->new($ENV{HOME} . "/.pbuilderrc.new", "w");

	if ($rc &&
	    chmod(0600, $ENV{HOME} . "/.pbuilderrc.new"))
	{
	    if (print $rc $settings)
	    {
		if (close $rc)
		{
		    if (rename($ENV{HOME} . "/.pbuilderrc.new",
			$ENV{HOME} . "/.pbuilderrc"))
		    {
			print "Removed hooks from $ENV{HOME}/.pbuilderrrc\n";
			exit(1);
		    }
		}
	    }
	}
    }
}

if ($cmd eq "unhook")
{
    if (system("sudo", $0, $release, "-unhook", $ENV{HOME}) != 0)
    {
	exit(1);
    }

    exit(0);
}

if ($cmd eq '-unhook')
{
    my $fh = IO::File->new;

    opendir($fh, $hooksdir) || die "$hooksdir: $!\n";

    foreach my $hook (grep(/pbuilder-dist-extras$/, readdir($fh)))
    {
	unlink("$hooksdir/$hook");
    }
    close($fh);
    exit(0);
}

unless (-f $userhome . "/pbuilder/${release}-base.tgz" && -d $result)
{
    print STDERR "$release appears to be incorrect (run pbuilder-dist create first?)\n";
    exit 1;
}

# Install a .pbuilderrc file with HOOKSDIR and BINDMOUTNS settings
#
# This is used for both the build userid, and root.

sub switch {
    my $setting_hookdir = "HOOKDIR=\"$hooksdir\"";
    my $setting_bindmounts = "BINDMOUNTS=\"$result\"";
    my $settings = <<EOF
$setting_hookdir
$setting_bindmounts
EOF
    ;

    # Parse the existing .pbuilderrc if there is one.
    #
    # Make sure we won't clobber any custom settings.
    #
    # Add any other settings to $settings

    my $rc = IO::File->new($ENV{HOME} . "/.pbuilderrc", "r");

    if ($rc)
    {
	my $line;

	my $orig = "";

	while (defined($line = <$rc>))
	{
	    $orig .= $line;

	    if ($line =~ /^HOOKDIR=/)
	    {
		chomp $line;

		unless ($line eq $setting_hookdir)
		{
		    print STDERR "Existing setting: $line\n";
		    print STDERR "Cannot update.\n";
		    exit 1;
		}
		next;
	    }

	    if ($line =~ /^BINDMOUNTS=/)
	    {
		chomp $line;

		unless ($line eq $setting_bindmounts)
		{
		    print STDERR "Replacing $line\n";
		}
		next;
	    }
	    $settings .= $line;
	}

	if ($orig eq $settings)
	{
	    return;
	}
    }

    $rc = IO::File->new($ENV{HOME} . "/.pbuilderrc.new", "w");

    if ($rc &&
	chmod(0600, $ENV{HOME} . "/.pbuilderrc.new"))
    {
	if (print $rc $settings)
	{
	    if (close $rc)
	    {
		if (rename($ENV{HOME} . "/.pbuilderrc.new",
		    $ENV{HOME} . "/.pbuilderrc"))
		{
		    print "Updated $ENV{HOME}/.pbuilderrrc for $result\n";
		    return;
		}
	    }
	}
    }

    print STDERR "Cannot update $ENV{HOME}/.pbuilderrc\n";
    exit 1;
}

if ($cmd eq "-switch")
{
    # Set up root's pbuilder configuration

    switch();

    unless (-d $hooksdir)
    {
	if (!mkdir($hooksdir, 0755))
	{
	    print STDERR "Cannot create $hooksdir\n";
	    exit(1);
	}
    }

    # pbuilder hooks, see pbuilder(8)

    # I-hook. After a build update the Packages file of the pbuilder's
    # repository.

    my $package_hook = <<EOF
#
set -e
cd $result
eval `/usr/bin/dpkg-architecture`
rm -rf dists
mkdir -p dists/$release/main/binary-\$DEB_TARGET_ARCH
/usr/bin/dpkg-scanpackages . /dev/null >dists/$release/main/binary-\$DEB_TARGET_ARCH/Packages
EOF
	;

    # D/F hook. Before unpacking the package to build, or for the login or
    # execute command, set up the custom pbuilder root. If the Packages file
    # does not exist create an empty one. pde-local executes pbuilder-dist
    # with --othermirror pointing to this internal mirror.
    #
    # The script also reads AUTO_INSTALL, and installs each package there,
    # reads LOCALES, and installs any locales, and installs a custom
    # /etc/apt/preferences, if needed.

    my $setup_hook = <<EOF
#
set -e
cd $result
eval `/usr/bin/dpkg-architecture`
if test ! -f dists/$release/main/binary-\$DEB_TARGET_ARCH/Packages
then
	mkdir -p dists/$release/main/binary-\$DEB_TARGET_ARCH
	>dists/$release/main/binary-\$DEB_TARGET_ARCH/Packages
fi
/usr/bin/apt-get update
if test -f AUTO_INSTALL
then
	/usr/bin/apt-get -y --allow-downgrades install `cat AUTO_INSTALL`
fi

if test -f LOCALES
then
	for locale in `cat LOCALES`
	do
		locale-gen \$locale
	done
	update-locale
fi

if test -f preferences
then
	cp preferences /etc/apt/preferences
else
	rm -f /etc/apt/preferences
fi
EOF
	;

    my %all_hooks = (
	$hooksdir . "/I70pbuilder-dist-extras" => $package_hook,
	$hooksdir . "/D70pbuilder-dist-extras" => $setup_hook,
	$hooksdir . "/F70pbuilder-dist-extras" => $setup_hook,
	);

    foreach my $existing_hook (
	sort glob ($hooksdir . "/*pbuilder-dist-extras"))
    {
	next unless -f $existing_hook;

	next if grep {$existing_hook eq $_} keys %all_hooks;
	unlink($existing_hook);
    }

    foreach my $cache (sort keys %all_hooks)
    {
	my $oldhook = "";

	my $rc = IO::File->new($cache, "r");

	if ($rc)
	{
	    $oldhook = join("", <$rc>);
	    close($rc);
	}

	if ($all_hooks{$cache} eq $oldhook)
	{
	    next;
	}

	$rc = IO::File->new($cache, "w");

	if ($rc && chmod(0755, $cache))
	{
	    if (print $rc $all_hooks{$cache})
	    {
		if (close($rc))
		{
		    print STDERR "Switched $cache to $result\n";
		    next;
		}
	    }
	}

	print STDERR "Cannot update $cache\n";
	exit 1;
    }
    exit (0)
}

if ($cmd eq 'aptly')
{
    my $repo = "mine-$release";
    my $force = 0;

    if (@ARGV && $ARGV[0] !~ /^-/)
    {
	$repo = shift @ARGV;
    }

    while (@ARGV)
    {
	my $opt = shift @ARGV;

	if ($opt eq '-force')
	{
	    $force = 1;
	    next;
	}

	print STDERR "Usage: $0 [distribution] aptly [repo [-force]]\n";
	exit(1);
    }

    my $fh = IO::File->new("/usr/bin/dpkg-architecture |");

    my $arch;

    while (<$fh>)
    {
	chomp;

	$arch = $1 if /^DEB_TARGET_ARCH=(.*)/;
    }

    unless ($arch)
    {
	print STDERR "Unable to determine architecture\n";
	exit(1);
    }

    # Parse the list of packages in the pbuilder's repo.

    $fh = IO::File->new($result . "/dists/$release/main/binary-$arch/Packages",
	"r");

    unless ($fh)
    {
	print STDERR "Cannot open $result/dists/$release/main/binary-$arch/Packages\n";
	exit(1);
    }

    my @dist_packages;

    while (<$fh>)
    {
	chomp;

	push @dist_packages, "$result/$1"
	    if /^Filename:\s*(.*)/;
    }

    unless (@dist_packages)
    {
	print STDERR "No packages found in $result/dists/$release/main/binary-$arch/Packages\n";
	exit(1);
    }

    # Check if the aptly repo already exists, or create it.

    my $found_repo = 0;

    $fh = IO::File->new("aptly repo list -raw |");
    while (<$fh>)
    {
	chomp;

	if ($_ eq $repo)
	{
	    if (! $force)
	    {
		print STDERR "aptly repo $repo already exists.\n";
		exit(1);
	    }
	    $found_repo = 1;
	}
    }

    if (! $found_repo)
    {
	system("aptly", "repo", "create", $repo) == 0
	    || exit(1);
    }

    # Retrieve the list of packages in the aptly repo.

    $fh = IO::File->new;

    open($fh, "-|", "aptly", "repo", "search", $repo);

    my @existing_packages = <$fh>;
    chomp $_ for @existing_packages;

    my %existing_packages = map { ($_ => 1) } @existing_packages;

    my %current_packages;

    foreach my $file (@dist_packages)
    {
	my $basename = $file;

	$basename =~ s@.*/@@;

	$current_packages{$basename} = $file;
    }

    # aptly search output lists the packages without the .deb suffix.
    #
    # Check if the pbuilder-dist repo has the package, if not remove it
    # from the aptly repo.
    foreach my $existing_package (sort keys %existing_packages)
    {
	next if $current_packages{$existing_package . ".deb"};

	system("aptly", "repo", "remove", $repo, $existing_package) == 0
	    || exit 1
    }

    # Now go through the pbuilder repo's packages, and add them to the
    # aptly repo if they do not exist there.
    foreach my $file (sort keys %current_packages)
    {
	my $no_suffix = $file;

	$no_suffix =~ s@\.deb$@@;

	next if $existing_packages{$no_suffix};

	system("aptly", "repo", "add", "-force-replace", $repo, $current_packages{$file}) == 0
	    || exit 1;
    }

    # Attempt to push out a new aptly snapshot.

    my $create_new;
    my $counter = 0;

    do
    {
	if (++$counter > 2)
	{
	    print STDERR "Cannot update local repo\n";
	    exit(1);
	}

	# Retrieve a list of snapshots and published snapshots.

	my $snapshot_fh = IO::File->new("aptly snapshot list -raw |");

	my %snapshots;

	while (<$snapshot_fh>)
	{
	    chomp;
	    $snapshots{$_} = 1;
	}
	close($snapshot_fh);

	my %published;

	$snapshot_fh = IO::File->new("aptly publish list -raw |");
	while (<$snapshot_fh>)
	{
	    chomp;
	    my ($dir, $published) = split(/\s+/);

	    $published{$published} = 1;
	}
	close($snapshot_fh);

	# If the -new snapshot exist attempt to drop it. If it won't
	# drop it must be published already, and after cleaning up we'll
	# try again.

	$create_new = 1;

	if ($snapshots{"${repo}-new"})
	{
	    print "Attempting to remove incomplete snapshot ${repo}-new\n";
	    if (system("aptly", "snapshot", "drop", "${repo}-new") != 0)
	    {
		$create_new = 0;
	    }
	}

	if ($create_new)
	{
	    # Create a new snapshot

	    system("aptly", "snapshot", "create", "${repo}-new",
		"from", "repo", $repo) == 0
		or exit 1;

	    # If there's an existing published snapshot switch the new snapshot
	    # to it.

	    if ($published{$release})
	    {
		print "Switching $repo\n";

		system("aptly", "publish", "switch",
		    $release, "${repo}-new") == 0
		    or exit 1
	    }
	    else
	    {
		# First published snapshot.

		print "Publishing $repo\n";

		system("aptly", "publish", "snapshot",
		    "-distribution=$release", "${repo}-new") == 0
		    or exit 1
	    }
	}

	# Drop the old snapshot

	if ($snapshots{$repo})
	{
	    system("aptly", "snapshot", "drop", $repo) == 0
		or exit 1
	}

	# And rename the new snapshot to the current one.

	system("aptly", "snapshot", "rename", "${repo}-new", $repo) == 0
	    or exit 1;
    } while (! $create_new );

    system("aptly", "db", "cleanup") == 0 or exit 1;

    exit 0;
}

# Update our .pbuilderrc and the root's.

switch;

if (system("sudo", $0, $release, "-switch", $ENV{HOME}) != 0)
{
    exit(1);
}

# Common logic for updating AUTO_INSTALL and LOCALE lists.

sub update_file {
    my ($f) = @_;

    # Read the existing contents of the file

    my %entries;

    my $fh = IO::File->new($result . "/$f", "r");

    if ($fh)
    {
	while (defined(my $pkg = <$fh>))
	{
	    chomp $pkg;
	    $entries{$pkg} = 1;
	}
	close($fh);
    }

    # Apply the updates.

    foreach my $pkg (@ARGV)
    {
	if ($pkg =~ s/^-//)
	{
	    delete $entries{$pkg};
	}
	else
	{
	    $pkg =~ s/^\+//;
	    $entries{$pkg} = 1;
	}
    }

    # Save new file.
    if (%entries)
    {
	my $fh = IO::File->new($result . "/$f", "w");

	unless ($fh)
	{
	    print STDERR "Cannot create the $f file\n";
	    exit(1);
	}

	if (!(print $fh join("\n", sort keys %entries) . "\n") ||
	    !close($fh))
	{
	    print STDERR "Cannot update the $f file\n";
	    exit(1);
	}

	print "The following entries will be installed:\n";
	print "    $_\n"
	    for sort keys %entries;
    }
    else
    {
	unlink($result . "/$f");
	print "No extra entries will be installed.\n";
    }
}

if ($cmd eq "use")
{
    update_file("AUTO_INSTALL");
    exit(0);
}

if ($cmd eq "locale")
{
    update_file("LOCALES");
    exit(0);
}

if ($cmd eq "clean")
{
    foreach my $pat (
	"build",
	"buildinfo",
	"bz2",
	"changes",
	"ddeb",
	"deb",
	"dsc",
	"log",
	"xz",
	)
    {
	foreach my $f (glob("$result/*.$pat"))
	{
	    unlink($f);
	}
    }
    exit(0);
}

my @options;

if ($cmd ne "update")
{
    @options = (
	"--othermirror",
	"deb [trusted=yes] file://$result $release main|"
	. "deb http://archive.ubuntu.com/ubuntu $release-updates main restricted universe multiverse|"
	. "deb http://archive.ubuntu.com/ubuntu $release-backports main restricted universe multiverse"
	);
}

exec("pbuilder-dist", $release, $cmd, "--override-config", @options, @ARGV);
exit(1);

=pod

=head1 NAME

pde-local - pbuilder-dist helper for builds with additional local dependencies

=head2 USAGE

    pbuilder-dist [dist] create

    pde-local [dist] build package.dsc...

=head2 DESCRIPTION

C<pde-local> is a wrapper for C<pbuilder-dist> that automates the workflow
of using pbuilder-dist to incrementally build mutually-dependent packages
that are not a part of a distribution. A local repository gets automatically
set up and added to the build root. Each built package gets added to the
local repository and becomes available as a build dependency of the next
package. This workflow makes it possible to bootstrap a series of packages that
have mutual dependencies.

This workflow begins by using C<pbuilder-dist [dist] create> to create the
buildroot image. This documentation uses the label C<[dist]> as a placeholder
for pbuilder-dist's "distribution" label.

C<pde-local> implements all commands described below by itself, and then
forwards all other commands to C<pbuilder-dist> after:

* Updating both C<~/.pbuilderrc> and C</root/.builderrc>, if needed

* Updating its hooks in C</var/cache/pbuilder/hook.d>

C<pde-local> peeks at the C<[dist]> suite label, and uses it to update the
configuration file and the hook scripts accordingly.

C<pde-local>'s changes have the effect of running C<pbuilder-dist> with
an extra source repository added to C<sources.list> in the build root.
C<pde-local [dist] build [filename].dsc> runs C<pbuilder-dist> with the
same parameters. If all goes well the resulting binary and source packages
get written into C<~/pbuilder/[dist]_results> which also happens to be
exactly where the extra source repository lives.
C<pde-local> also adds the C<[dist]-updates> and C<[dist]-backports> to the
build root's C<sources.list>.

The C<clean> command (see below) removes all built packages from the
 build root.

    pde-local [dist] unhook

The C<unhook> command has the effect of removing the hooks and undoing
the above changes to the C<.pbuilderrc> files.

=head2 HOOKS

C<pde-local> installs C<I>, C<D> and C<F> hooks (see C<man pbuilder>) that
 adjust the build root for the C<build> and C<login/execute> pbuilder commands.
The following commands adjust the build root:

    pde-local [dist] use package1 package2...

    pde-local [dist] use -package1...

The C<use> command updates the list of packages that get installed by
C<apt install> in the build root. Each C<use> command adds the listed
packages to the installation list. Prepend a package name with a dash
to remove it from the list.

NOTE: the packages get installed with C<-y --allow-downgrades> flags.

    pde-local [dist] locale en_US.UTF-8

    pde-local [dist] locale -en_US.UTF-8

Adds/removes a locale from the buildroot. This requires the "locales"
package, use C<pde-local [dist] use locales> to add it to the build root.

    pde-local [dist] clean

The C<clean> command deletes all built deb files from the result directory.
At this time, the hook that updates the extra source repository does not
get run, and the repository is in a temporary bad state until the first
package gets built again.

=head2 PUSHING TO AN APTLY REPOSITORY

    pde-local [dist] aptly [name -force]

The C<aptly> command pushes all built deb files from the build root's extra
source repository to aptly and publishes it.

C<aptly> creates an aptly repository named C<[name]>. Pass an additional
C<-force> option to automatically delete any existing aptly repository
with that name. Afterwards the C<aptly> command creates a named snapshot
called C<[name]> (using a temporary, transitional C<[name]-new> snapshot)
and publishes it.

=head2 OTHER FILES

    ~/pbuilder/[dist]_results/preferences

If this file exists it gets installed as /etc/apt/preferences in the
build root.

=cut
